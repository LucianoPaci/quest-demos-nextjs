/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Switch, FormControlLabel, Radio, Checkbox, Avatar, Button, Autocomplete, TextField, Alert } from '@mui/material';
import { styled } from '@mui/material/styles';

 
const SuperContainer1 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `1px 24px`,  
  boxSizing: `border-box`,  
  height: "100%",  
  width: "100%",  
});
  
const FormControlLabel1 = styled(FormControlLabel)({  
  margin: `0px`,  
});
  
const Frame9 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `17px 30px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 13px`,  
});
  
const FormControlLabel2 = styled(FormControlLabel)({  
  margin: `0px`,  
});
  
const FormControlLabel3 = styled(FormControlLabel)({  
  margin: `29px 0px 0px 0px`,  
});
  
const Frame10 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `10px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 13px`,  
});
  
const FormControlLabel4 = styled(FormControlLabel)({  
  margin: `0px`,  
});
  
const FormControlLabel5 = styled(FormControlLabel)({  
  margin: `10px 0px 0px 0px`,  
});
  
const FormControlLabel6 = styled(FormControlLabel)({  
  margin: `10px 0px 0px 0px`,  
});
  
const Frame11 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `26px 35px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 13px`,  
});
  
const Avatar1 = styled(Avatar)({  
  margin: `0px`,  
  width: `40px`,  
  height: `40px`,  
});
  
const ButtonContained = styled(Button)({  
  margin: `15px 0px 0px 0px`,  
});
  
const Autocomplete1 = styled(Autocomplete)({  
  width: `220px`,  
  margin: `15px 0px 0px 0px`,  
});
  
const FormControlLabel7 = styled(FormControlLabel)({  
  margin: `15px 0px 0px 0px`,  
});
  
const AlertFilled = styled(Alert)({  
  width: `320px`,  
  margin: `15px 0px 0px 0px`,  
});
 
function SuperContainer(props) {
  return (
    <SuperContainer1 className={props.className} >
      <FormControlLabel1 control={<Switch defaultChecked={false} color="info" size="medium" />} label={"Label"} />
      <Frame9 >
        <FormControlLabel2 control={<Radio color="primary" size="small" />} label={"Label"} />
        <FormControlLabel3 control={<Radio color="primary" size="small" />} label={"Label"} />
      </Frame9>
      <Frame10 >
        <FormControlLabel4 control={<Checkbox defaultChecked={false} size="medium" color="secondary" />} label={`Label`} />
        <FormControlLabel5 control={<Checkbox defaultChecked={false} size="medium" color="secondary" />} label={`Label`} />
        <FormControlLabel6 control={<Checkbox defaultChecked={false} size="medium" color="secondary" />} label={`Label`} />
      </Frame10>
      <Frame11 >
        <Avatar1 variant="circular" src={`assets/images/SuperContainer_Avatar.png`} alt={"Avatar"}   />
        <ButtonContained variant="contained" size="large" color="secondary"    > Large </ButtonContained>
        <Autocomplete1        autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="outlined" {...params} fullWidth  label={`Label`}  /> )} />
        <FormControlLabel7 control={<Switch defaultChecked={false} color="info" size="medium" />} />
        <AlertFilled variant="filled" severity={"success"}   > Description </AlertFilled>
      </Frame11>
    </SuperContainer1>
  );
}

export default SuperContainer;
